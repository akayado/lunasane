class IDNotFoundError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

def new_id_class(_default_prefix, digits=4):
    class AbstractID(str):
        ids = {} # dictionary of used ids of each domain.
        default_prefix = _default_prefix # prefix for ids generated by new_id.

        def __new__(cls, domain, idobj=None):
            if domain not in cls.ids:
                cls.ids[domain] = []
            if (idobj not in cls.ids[domain]) and (idobj != None):
                cls.register_id(domain, idobj)
                return super().__new__(cls, idobj)
            else:
                idobj = cls.new_id(domain)
                cls.register_id(domain, idobj)
                return super().__new__(cls, idobj)

        def serializable(self): # for JSON export
            return str(self)

        @classmethod
        def register_id(cls, domain, idobj):
            if domain in cls.ids:
                cls.ids[domain] += [idobj]
            else:
                cls.ids[domain] = [idobj]

        @classmethod
        def new_id(cls, domain):
            if domain not in cls.ids:
                cls.ids[domain] = []
            cnt = 0
            while True:
                idobj = cls.default_prefix + str(cnt).zfill(digits)
                if idobj not in cls.ids[domain]:
                    return idobj
                cnt += 1

    return AbstractID

